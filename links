#!/bin/bash

# Links
#
# stores connections between files & directories
# in json files ./.links
# 

# get install path
export install_path=$(cat $HOME/.config/links)
if test ! -e "$install_path/links"; then
    echo "Can't find source"
    echo "Make sure path to source files is saved in $HOME/.config/links"
    exit
fi

command=$1
shift

export usage=$(cat <<EOF
links subcommands:

crt <source> <target>
edit <source> <target>
rm <source> <target>
get <path> [-i | -o]
- if path omitted or given w/ trailing slash, prints all links
   in current/given directory
- otherwise, prints links to/from <path>
- also accepts 'get <search_key> ...' to match filenames in ./.links
open <index> <source | target>
- where 'index' is as given in 'links ls'

EOF
     )"\n\n"


case $command in
    get)
	source $install_path/links-get.sh $@
	;;
    crt|rm)
	# resolve source/target paths
	src=$1
	target=$2
	shift 2

	# validate arguments
	if test -z "$src" -o -z "$target"; then
	    printf "$usage"
	    exit
	fi
	if ! test -e $src -a -e $target; then
	    echo "One or more arguments don't exist in filesystem."
	    exit
	fi

	# make absolute
	if ! [[ $src =~ ^/ ]]; then
	    src=$PWD/$src
	fi
	if ! [[ $target =~ ^/ ]]; then
	    target=$PWD/$target
	fi
	
	# we wanna hold both in and out links...
	src_file=$(dirname $src)/.links
	tar_file=$(dirname $target)/.links

	# check for links files
	if ! test -e $src_file; then
	    jq -n '[]' >$src_file
	fi
	if ! test -e $tar_file; then
	    jq -n '[]' >$tar_file
	fi

	case $command in
	    crt)
		source $install_path/links-crt.sh \
		       $src $target $src_file $tar_file $@
		;;
	    rm)
		source $install_path/links-rm.sh \
		       $src $target $src_file $tar_file $@
		;;
	esac
	;;
    open)
	export src_file=.links
	source $install_path/links-open.sh $@
	;;
    help|--help|-h)
	printf "$usage"
	exit
	;;
    *)
	echo "unrecognized command; 'help' for usage"
esac


