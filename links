#!/bin/bash

# Links
#
# stores connections between files & directories
# in json files ./.links
# 

# get install path
export install_path=$(cat $HOME/.config/links)
if test ! -e "$install_path/links"; then
    echo "Can't find source"
    echo "Make sure path to source files is saved in $HOME/.config/links"
    exit
fi

command=$1
shift

export usage=$(cat <<EOF
links subcommands:

crt <source> <target>
edit <source> <target>
- not implemented...
rm <source> <target>
get <path> [-i | -o]
- if path omitted or given w/ trailing slash, prints all links
   in current or given directory
- otherwise, prints links to/from <path>
- also accepts 'get <search_key> ...' to match filenames in ./.links
open <key>
- open file referenced in ./.links
- must yield unique match

EOF
     )"\n\n"


case $command in
    get)
	source $install_path/links-get.sh $@
	;;
    crt|rm)
	# resolve source/target paths
	src=$1
	target=$2
	shift 2

	# validate arguments
	if test -z "$src" -o -z "$target"; then
	    printf "$usage"
	    exit
	fi
	if ! test -e $src -a -e $target; then
	    echo "One or more arguments don't exist in filesystem."
	    exit
	fi

	# make absolute/standardize
	if ! [[ $src =~ ^/ ]]; then
	    src=$(cd $PWD/$src && pwd)
	fi
	if ! [[ $target =~ ^/ ]]; then
	    target=$(cd $PWD/$target && pwd)
	fi
	target=${target%/}
	src=${src%/}
	
	# record links in both locations
	linksfiles=($(dirname $src)/.links)
	if test $(dirname $target) != $(dirname $src); then
	    linksfiles+=($(dirname $target)/.links)
	fi

	# if src/target is a directory, we record its links inside it as well...
	if test -d $src; then
	    linksfiles+=($src/.links)
	fi
	if test -d $target; then
	    linksfiles+=($target/.links)
	fi

	# check for links files
	for f in ${linksfiles[@]}; do
	    if ! test -s $f; then
		jq -n '[]' >$f
	    fi
	done

	export src target linksfiles
	
	case $command in
	    crt)
		source $install_path/links-crt.sh $@
		;;
	    rm)
		source $install_path/links-rm.sh $@
		;;
	esac
	;;
    open)
	export src_file=.links
	source $install_path/links-open.sh $@
	;;
    help|--help|-h)
	printf "$usage"
	exit
	;;
    *)
	echo "unrecognized command; 'help' for usage"
esac


